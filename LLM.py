# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/188uLiNeIrkZV_UkTOcqK0-GAIkbspEhU
"""

import torch
import torch.nn as nn
from torch.nn import functional as F
import mmap
import random
import pickle
import argparse


device = "cuda" if torch.cuda.is_available() else 'cpu'

batch_size =28
block_size =128
epochs = 1000
eval_iter = 50
learning_rate = 3e-4
n_head = 4
n_embd =384
n_layer =4
dropout = 0.2

print(device)

with open("data",'r',encoding='utf-8') as f:
  text = f.read()
  chars = sorted(set(text))
  print(chars)
vocab_size = len(chars)

with open("data",'r',encoding='utf-8') as f:
  text = f.read()
  chars = sorted(set(text))
  print(chars)
vocab_size = len(chars)

data = torch.tensor(encode(text),dtype=torch.long)
n = int(0.8 * len(data))
train_data = data[:n]
val_data = data[n:]
def get_batch(split):
  data = train_data if split =='train' else val_data
  ix = torch.randint(len(data) - block_size,(batch_size,))
  x = torch.stack([data[i:i+block_size] for i in ix])
  y = torch.stack([data[i+1:i+block_size+1] for i in ix])
  x,y=x.to(device),y.to(device)
  return x,y

@torch.no_grad()
def estimate_loss():
  out = {}
  model.eval()
  for split in ['train','val']:
    losses = torch.zeros(eval_iter)
    for k in range(eval_iter):
      X,Y = get_batch(split)
      logits,loss = model(X,Y)
      losses[k] = loss.item()
    out[split] = losses.mean()
  model.train()
  return out

class Head(nn.Module):
  def __init__(self,head_size):
    super().__init__()
    self.key = nn.Linear(n_embd,head_size,bias=False)
    self.query = nn.Linear(n_embd,head_size,bias=False)
    self.value = nn.Linear(n_embd,head_size,bias=False)

    self.register_buffer('tril',torch.tril(torch.ones(block_size,block_size)))

    self.dropout = nn.Dropout(dropout)

  def forward(self,x):
    B,T,C = x.shape
    k = self.key(x)
    q = self.query(x)

    wei = q @ k.transpose(-2,-1)*k.shape[-1]**-0.5
    wei = wei.masked_fill(self.tril[:T,:T]==0,float('-inf'))
    wei = F.softmax(wei,dim=-1)
    wei = self.dropout(wei)

    v = self.value(x)

    out = wei @ v

    return out
class MultiHeadAttenttion(nn.Module):
  def __init__(self,num_heads,head_size):
    super().__init__()
    self.head = nn.ModuleList([Head(head_size) for _ in range(num_heads)])
    self.proj = nn.Linear(head_size * num_heads,n_embd)
    self.dropout = nn.Dropout(dropout)

  def forward(self,x):
    out = torch.cat([h(x) for h in self.head],dim=-1)
    out = self.dropout(self.proj(out))
    return out


class FeedForward(nn.Module):
  def __init__(self,n_embd):
    super().__init__()
    self.net= nn.Sequential(
        nn.Linear(n_embd, 4 * n_embd),
        nn.ReLU(),
        nn.Linear(4* n_embd,n_embd),
        nn.Dropout(dropout)
    )
  def forward(self,x):
    return self.net(x)
class Block(nn.Module):
  def __init__(self,n_embd,n_head):
    super().__init__()
    head_size = n_embd // n_head
    self.sa = MultiHeadAttenttion(head_size,n_head)
    self.ffwd = FeedForward(n_embd)
    self.ln1 = nn.LayerNorm(n_embd)
    self.ln2 = nn.LayerNorm(n_embd)

  def forward(self,x):
    y = self.sa(x)
    x = self.ln1(x + y)
    y = self.ffwd(x)
    x = self.ln2(x+y)
    return x

class GPTLanguageModel(nn.Module):
  def __init__(self,vocab_size):
    super().__init__()
    self.token_embedding_table = nn.Embedding(vocab_size,n_embd)
    self.position_embedding_table = nn.Embedding(block_size,n_embd)
    self.blocks  = nn.Sequential(*[Block(n_embd,n_head=n_head) for _ in range(n_layer)])
    self.ln_y = nn.LayerNorm(n_embd)
    self.ln_head = nn.Linear(n_embd,vocab_size)

    self.apply(self._init_weights)

  def _init_weights(self,module):
    if isinstance(module,nn.Linear):
      torch.nn.init.normal_(module.weight,mean=0.0,std=0.02)
      if module.bias is not None:
        torch.nn.init.zeros_(module.bias)
    elif isinstance(module,nn.Embedding):
      torch.nn.init.normal_(module.weight,mean=0.0,std=0.02)

  def forward(self,index,targets=None):
    B,T = index.shape
    tok_emb = self.token_embedding_table(index)
    pos_emb = self.position_embedding_table(torch.arange(T,device=device))
    x = tok_emb + pos_emb
    x = self.blocks(x)
    x = self.ln_y(x)
    logits = self.ln_head(x)

    if targets is None:
      loss = None
    else:
      B,T,C = logits.shape
      logits = logits.view(B*T,C)
      targets = targets.view(B*T)
      loss = F.cross_entropy(logits,targets)
    return logits,loss

  def generate(self,index,max_new_tokens):
    for _ in range(max_new_tokens):
      blk_size = len(index)
      index_cond = index[:,-blk_size:]
      logits,loss = model.forward(index_cond)
      logits = logits[:,-1,:]
      prob = F.softmax(logits,dim=-1)
      index_next = torch.multinomial(prob,num_samples=1)
      index  =torch.cat((index,index_next),dim=1)
    return index

model = GPTLanguageModel(vocab_size)

m = model.to(device)

optimizer = torch.optim.AdamW(model.parameters(),lr=learning_rate)


for epoch in range(epochs):
  if epoch % eval_iter ==0:
    losses = estimate_loss()
    print(f"Epoch{epoch} | Train Loss {losses['train']:.3f} | val loss {losses['val']:.3f}")

  xb,yb = get_batch('train')
  logits,loss = model.forward(xb,yb)
  optimizer.zero_grad(set_to_none=True)
  loss.backward()
  optimizer.step()
print(loss.item())
n_params=0
for p in m.parameters():
    n_params+=torch.numel(p)

print(n_params)

prompt = 'Hello! how are you?'
context = torch.tensor(encode(prompt), dtype=torch.long, device=device)
generated_chars = decode(m.generate(context.unsqueeze(0), max_new_tokens=100)[0].tolist())
print(generated_chars)